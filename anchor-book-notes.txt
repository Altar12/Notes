By enabling the cpi feature, the puppet-master program gets access to the puppet::cpi module.

Anchor protects you from CPIs to malicious programs with two measures. First, the Program<'info, T> type checks that the given account is the expected program T. Should you ever forget to use the Program type, the automatically generated cpi function (in the previous example this was puppet::cpi::set_data) also checks that the cpi_program argument equals the expected program.

If you need to read the value of an account that has just been changed by a CPI, you can call its reload method which will re-deserialize the account. ctx.accounts.puppet.reload()?;

let result = puppet::cpi::set_data(cpi_ctx, data)?;
let return_data = result.get();
// only 1024 bytes of data at max can be returned from instructions

 you can use the view function to read whatever was set last as return data in the transaction (view simulates the transaction and reads the Program return log).
 const returnData = await program.methods
    .calculate(someVariable)
    .accounts({
        acc: somePubkey,
        anotherAcc: someOtherPubkey
    })
    .view();
    
There are two use cases for PDAs. They provide a mechanism to build hashmap-like structures on-chain and they allow programs to sign instructions (cpi's).
You can even combine these two use cases and use a PDA that's used in an instruction as a state account to also sign a CPI.
